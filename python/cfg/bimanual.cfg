#!/usr/bin/env python
PACKAGE = "teaching_bimanual_policy"
 
from dynamic_reconfigure.parameter_generator_catkin import *
 
gen = ParameterGenerator()
gen.add("Name_task",    str_t,    0, "A string parameter",  "last") 

gen.add("load_model_left",   bool_t,   0, "A Boolean parameter",  False)
gen.add("load_model_right",   bool_t,   0, "A Boolean parameter",  False)
gen.add("bool_model_bimanual",   bool_t,   0, "A Boolean parameter",  False)



size_enum = gen.enum([ gen.const("Nothing",    int_t, 0, ""),
                        gen.const("Left_Arm",  int_t, 1, ""),
                        gen.const("Right_Arm", int_t, 2, ""),
                        gen.const("Both_Arm",  int_t, 3, ""),
                    ],
                      "An enum to set size")
 
gen.add("Active", int_t, 0, "A size parameter which is edited via an enum", 0, 0, 3, edit_method=size_enum)


size_enum2 = gen.enum([ gen.const("Nothing",    int_t, 0, ""),
                        gen.const("Left_Arm",  int_t, 1, ""),
                        gen.const("Right_Arm", int_t, 2, ""),
                        gen.const("Both_Arm",  int_t, 3, ""),
                    ],"An enum to set size")


gen.add("Demonstration", int_t, 0, "A size parameter which is edited via an enum", 0, 0, 3, edit_method=size_enum)

size_enum3 = gen.enum([ gen.const("Nothing",    int_t, 0, ""),
                        gen.const("Left_Arm",  int_t, 1, ""),
                        gen.const("Right_Arm", int_t, 2, ""),
                        gen.const("Both_Arm",  int_t, 3, ""),
                    ],"An enum to set size")

gen.add("Execution", int_t, 0, "A size parameter which is edited via an enum", 0, 0, 3, edit_method=size_enum2)

gen.add("progress_trjectory", double_t, 0, "Progress in trajectory of bimanual",    0, 0,   1)
gen.add("progress_left",      double_t, 0, "Progress in trajectory left",           0, 0,   1)
gen.add("progress_right",     double_t, 0, "Progress in trajectory right",          0, 0,   1)

gen.add("save_model_left",       bool_t,   0, "A Boolean parameter",  False)
gen.add("save_model_right",      bool_t,   0, "A Boolean parameter",  False)
gen.add("save_model_bimanual",   bool_t,   0, "A Boolean parameter",  False)

exit(gen.generate(PACKAGE, "dynamic_teaching", "dual_arm_dymamic_teaching"))
